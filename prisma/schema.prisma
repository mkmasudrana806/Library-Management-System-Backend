generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ---------------- all enum ----------------------
enum UserRole {
  ADMIN
  LIBRARIAN
  MEMBER
}

enum UserStatus {
  ACTIVE
  BLOCKED
  DELETED
}

// -------------------------- all model ------------------------
// ---------- member model
model User {
  id                 String     @id @default(uuid())
  email              String     @unique
  password           String
  role               UserRole
  needPasswordChange Boolean    @default(true)
  status             UserStatus @default(ACTIVE)
  createdAt          DateTime   @default(now())
  updatedAt          DateTime   @updatedAt
  member             Member?

  @@map("users")
}

// ------------ member model
model Member {
  memberId       String         @id @default(uuid())
  name           String
  email          String         @unique
  phone          String
  membershipDate DateTime       @default(now())
  isDeleted      Boolean        @default(false)
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  user           User           @relation(fields: [email], references: [email])
  borrowRecord   BorrowRecord[]

  @@map("members")
}

// ------------ Book model
model Book {
  bookId          String         @id @default(uuid())
  title           String
  genre           String
  publishedYear   Int
  totalCopies     Int
  availableCopies Int
  isDeleted       Boolean        @default(false)
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  borrowRecord    BorrowRecord[]

  @@map("books")
}

// ------------ BorrowRecord model
model BorrowRecord {
  borrowId   String   @id @default(uuid())
  bookId     String
  memberId   String
  borrowDate DateTime @default(now())
  returnDate DateTime
  isDeleted  Boolean  @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  book       Book     @relation(fields: [bookId], references: [bookId])
  member     Member   @relation(fields: [memberId], references: [memberId])

  @@map("borrowRecords")
}
